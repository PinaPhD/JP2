//@Author: Agrippina Mwangi
//Task Description: HCTMC System model
//Reliability Model variables



ctmc

//Normalized by the second - For Params I
const double y2s = (365.25*24*60*60);    //Normalizing factor -From year to seconds
const double h2s = (60*60);              //Normalizing factor -From year to seconds

//Failure Rates
const double lambdaC= 1/50*y2s;           //controller failure rate
const double lambdaSW = 1/25*y2s;          //switch failure rate
const double deltaC = 1/3600*h2s;          //controller failure detection rate

//Repair Rates
const double muC = 1/2*h2s;                //controller repair rate
const double muS = 1/2*h2s;                //switch repair rate

//Time-bound events
const double lambdaM = 1/3600;         //switch migration rate -detC to migS jump rate
const double lambdaDS = 1/360000;        //switch failure detection rate

//constraints
const double MIN_SENSORS = 2;  		   //minimum number of active sensors (system to continue running)
const double MIN_ACTUATORS = 2;  	   //minimum number of active actuators (system to continue running)
const double MIN_CONTROLLERS = 1;         //Maximum number of controllers
const double MIN_SWITCHES = 6;           //ring topology requirement


//mid-transition rates
const double dc = 1/11*y2s; 		// W1 to detC jump rate
const double ss = 1/3*y2s;                // migS to W2 jump rate
const double alphaS = 1/4*y2s;            // fdetS to W1 jump rate
const double deltaS = 1/2*y2s;            // detS to fdetS jump rate
const double alphaC = 1/y2s;            //fdetC to W1 jump rate



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////  THE NETWORK /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////


module switch
	//OpenFlow Switch at the Data Plane 
	//Source Switch (SW1) receives data samples from LDAQ and sends them to the destination Switch (SW9) 
	//to the ECP and vPAC nodes.
	sw : [0..10] init 10;                     //9 switch network - ring topology
	[switch_fails] sw>1 -> sw*lambdaSW: (sw'=sw-1);       //when a single switch fails (NFV instance)
endmodule


module controller
	//Controller at the Control Plane
	c : [0..5] init 5;                        //5 controllers in the network
	[controller_fails] c>1 -> c*lambdaC : (c'=c-1);          //When a single controller fails 
endmodule

module controller_cluster
	//Defining the working states and the transition jump rates for the control plane cluster
	// 3 - Working state, 2 - Detect Controller Failure (detC), 1 - fail to detect controller failure, 0 -Failed state
	cp : [0..3] init 3;    	   		//Start from the working state
	
	[detC] (cp>0 & c>MIN_CONTROLLERS) -> dc : (cp'=2);   //moves to the detC state
	[fdetC] (cp=2 & c>MIN_CONTROLLERS) -> deltaC : (cp'=1);     //moves to fdetC state
	[trigger_logs] (cp=1 & c>MIN_CONTROLLERS) -> alphaC : (cp'=3);      //redetects controller failure at W1
	[fail] (cp=1 & c>MIN_CONTROLLERS) | (cp=1 & c=MIN_CONTROLLERS) | (sw>MIN_SWITCHES)-> lambdaC : (cp' = 0);           // move to failed state and migrate the switches
	[migS] (cp=2 & c> MIN_CONTROLLERS & sw >=MIN_SWITCHES) -> lambdaM
	[repair] (cp=0 & c>MIN_CONTROLLERS) -> muC : (cp'=3);                             //repairing the controller (Reboot or Migrate VM)

endmodule

//Using formula to define the different states of the system (Figure 4)

//Failed State (F)
formula failed = true ;

//Degraded State(D)
formula degraded = true ;

//Working State (W)
formula working = true ;


//Assigning rewards to assess the performance
rewards "uptime"
	working : 1;
endrewards

rewards "degraded"
	degraded : 1;
endrewards 

rewards "downtime"
	failed : 1;
endrewards